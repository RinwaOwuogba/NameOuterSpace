CSC322Lecture 2 – Basic C# Syntax 1 Dr. Victor Odumuyiwa Learning outcomes At the end of this lecture, you should be able to: Demonstrate a good understanding of C# syntax Write simple programs in C#  2 Main class (Program.cs) using System.Text; using System.Threading.Tasks; namespace Lesson1 {     class Program     {         static void Main(string[] args)         {         }     } }  3 Statically vs. dynamically typed languages C# is a statically typed language, which is to say that any element of code that represents or produces information, such as a variable or an expression, has its data type determined at compile time.   Different from dynamically typed languages, such as JavaScript, in which types are determined at runtime. 4 Variable declaration (1/2) Each variable must be preceded by its type String name = “victor”; int  age = 22; After declaration, no need to specify type while using the variable name = “Jules”; age = 14;  5 Variable declaration (2/2) Multiple declarations in a line int a=4, b=5, c=6; Keyword “var” could be used to automatically determine the type var name = “victor”; var num = 5;  name = 6;   num = “Mike”;   6  Scope(1/4) A variable’s scope is the range of code in which you can refer to that variable by its name. Local variables are not the only things with scope. Methods, properties, types, and, in fact, anything with a name all have scope.  Scope is the region in which you can refer to the entity by its name  7 Scope(2/4) A local variable’s scope starts at its declaration, and finishes at the end of its containing block.  A block is a region of code delimited by a pair of braces { }.  A method body is a block, so a variable defined in one method is not visible in another method, because it is out of scope. 8 Scope(3/4) public int setCount()         {             int count =5;             return count;         } 9 public int getCount()         {             count = count+5;             return count;         }  Scope(4/4) In a nested block, everything that is in scope in the outer block continues to be in scope inside that nested block.  If you declare a variable in a nested block, its scope does not extend outside of that block. 10 Scope Example int n = 5;             if (n > 3)             {                 int ans = 3;                 n--;                 if (n <= 2)                 {                     ans = 2;                 }                 Console.WriteLine(ans);                 Console.WriteLine(n);             } 11 Declaration Space A declaration space is a region of code in which a single name must not refer to two different entities.  Each method defines a declaration space for variables.  Nested blocks also introduce declaration spaces, and it is illegal for a nested declaration space to declare a variable with the same name as one in its parent’s declaration space. Declaration space rules intent is that it shouldn’t matter where you put the declaration. If you were to move all of the variable declarations in a block to the start, this shouldn’t change what the code means.  12 Scope vs. Declaration Space int n = 5;             if (n > 3)             {                 int ans = 3;                 n--;                 if (n <= 2)                 {                     ans = 2;                 }                 Console.WriteLine(ans);                 Console.WriteLine(n);             } int n = 5;             if (n > 3)             {                 int ans = 3;                 n--;                 if (n <= 2)                 {                     ans = 2;                 }                 int n = 7;                 Console.WriteLine(ans);                 Console.WriteLine(n);              }  13 Statement and Expressions C# specification distinguishes between 14 different categories of statement Focus here will be on: Declaration statement Expression statement Iteration statement Selection statement What is the difference between expression and expression statement ?  14 Expression statements An expression is a sequence of operators and operands. You can use the following kind of expressions as statements: Method invocation Assignment Increment Decrement  New object declaration 2+3 is a valid expression but not an expression statement so the compiler will complain when you write 2+3; as a line of code. 15 Camel and Pascal Notation Camel notation  Each word in the identifier is put together without spaces, but with the first letter of each word capitalized looking like the humps of a camel myCamelNotationIdentifier Pascal Notation Pascal notation is like camel notation except that the initial letter is uppercase MyPascalNotationIdentifier For  variables and parameters/arguments we normally use “Camel notation”. For classes, methods and properties, we normally use “Pascal notation”.  16 Preprocessing Directives (1/2) Before your code is compiled, another program called the preprocessor runs and prepares your program for the compiler. The preprocessor examines your code for special preprocessor directives, all of which begin with the pound sign (#). These directives allow you to define identifiers and then test for their existence. Examples #define,  #if , #endif, #error, #warning, #line, #pragma #region and #endregion 17 Preprocessing Directives (2/2) 18 Constants A constant is an object whose values can not be changed.  Literals e.g. 10, 23, 45 Symbolic  Const type identifier = value;  //architecture(syntax) Const int BoilingPoint = 100; Enumerations 	[attributes] [modifiers] enum identifier 	[:base-type] {enumerator-list} 19 Intrinsic types Numeric types Integer types Floating-point types Boolean Strings and Characters Object 20 Integer types 21 Floating-point type 22 C# also recognizes a third floating-point type called Decimal (System.Decimal in the CLR) which is 128 bit value. In-class activity Numeric conversion int i = 42; double di = i; Console.WriteLine(i / 5); Console.WriteLine(di / 5); Console.WriteLine(i / 5.0); 23 Checked context (1/2) Checked C# defines the checked keyword which you can put in front of either a statement or an expression, making it a checked contest. This means that certain arithmetic operations, including casts, are checked for range overflow at runtime. If you cast a value to an integer type in a checked context, and the value is too high or low to fit, an error will occur—the code will throw a System.OverflowException. Checked contexts will also detect range overflows in ordinary arithmetic  24 Checked context (2/2) Unchecked C# also defines the unchecked keyword which can be used inside a checked block to indicate that a particular expression or nested block should not be a checked context  You can configure the C# compiler to put everything into a checked context by default, so that only explicitly unchecked expressions and statements will be able to overflow silently. 25 Checked context - example int result = checked( a + b ) + c; 26 Checked {   int r1 = a + b;   int r2 = r1 – (int) c; } Arithmetic Operators Assignment Operators Comparison Operators Logical Operators Binary integer operators 31 Ternary operator (Conditional operator) Conditional-expression ? expression1 :  expression2  int value1 = 5; int value2 = 10; int maxValue = value2 > value1 ? Value2 : value1 32 Control structure Sequential Flows from beginning to the end Selection Single selection Double selection Multiple selection Repetition Fixed repetition Pretest repetition Posttest repetition 33 In-class activities 1. Implement factorial using iteration 2. Implement factorial using recursion 3.  Implement a score grader 4. Implement a GPA calculator 34 